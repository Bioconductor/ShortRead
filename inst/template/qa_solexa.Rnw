\documentclass{article}

\usepackage{Sweave}

\begin{document}

\title{Solexa QA report}
\date{\today{}}
\maketitle{}

\section{Setup}

<<setup>>=
options(digits=3)
library(ShortRead)
library(lattice)
@

<<utilities, echo=FALSE>>=
ppnCount <- function(m) {
    ## scale subsequent columns to be proportions of 
    ## first column
    m[,-1] <- m[,-1] / m[,1]
    m
}
plotReadQuality <- function(df) {
    xyplot(density~quality|lane, df,
           type="l",
           xlab="Average (calibrated) base quality",
           ylab="Proportion of reads",
           aspect=2)
}
plotReadOccurrences <- function(df) {
    xyplot(log10(nReads)~log10(nOccurrences)|lane, df,
           xlab= expression(paste(
               "Number of occurrences of each read (",
               log[10], ")", sep="")),
           ylab=expression(paste(
               "Number of reads (", log[10], ")", sep="")),
           aspect=2)
}
plotAlignQuality <- function(df) {
    xyplot(count~score|lane, qa[["alignQuality"]],
           type="l",
           prepanel=function(x, y, ...) {
               list(ylim=c(0, 1))
           },
           panel=function(x, y, ...) {
               panel.xyplot(x, y/max(y), ...)
           },
           xlab="Alignment quality score",
           ylab="Number of alignments, relative to lane maximum",
           aspect=2)
}

.plotTileLocalCoords <- function(tile, nrow) {
    row <- 1 + (tile - 1) %% nrow
    col <- 1 + floor((tile -1) / nrow)
    row[col%%2==0] <- nrow + 1 - row[col%%2==0]
    list(row=as.integer(row), col=as.factor(col))
}
.colorkeyNames <- function(at, fmt) {
    paste(names(at), " (", sprintf(fmt, at), ")", sep="")
}
plotTileCounts <- function(df, nrow=100) {
    df <- df[!is.na(df$count),]
    xy <- .plotTileLocalCoords(df$tile, nrow)
    df[,names(xy)] <- xy
    at <- quantile(df$count, seq(0, 1, .1))
    levelplot(cut(count, at)~col*row|lane, df,
              main="Read count (percentile rank)",
              xlab="Tile local x-coordinate",
              ylab="Tile local y-coordinate",
              cuts=length(at)-2,
              colorkey=list(
                labels=.colorkeyNames(at, "%d")),
              aspect=2)
}
plotTileQualityScore <- function(df, nrow=100) {
    df <- df[!is.na(df$score),]
    xy <- .plotTileLocalCoords(df$tile, nrow)
    df[,names(xy)] <- xy
    at <- quantile(df$score, seq(0, 1, .1))
    levelplot(cut(score, at)~col*row|lane, df,
              main="Read quality (percentile rank)",
              xlab="Tile local x-coordinate",
              ylab="Tile local y-coordinate",
              cuts=length(at)-2,
              colorkey=list(
                labels=.colorkeyNames(at, "%.2f")),
              aspect=2)
}
plotCycleBaseCall <- function(df) {
    col <- rep(c("red", "blue"), 2)
    lty <- rep(1:2, each=2)
    df <- df[df$Base != "N",]
    xyplot(log10(Count)~as.integer(Cycle)|lane, 
           group=factor(Base), df, 
           type="l", col=col, lty=lty,
           key=list(space="top", 
             lines=list(col=col, lty=lty),
             text=list(lab=as.character(unique(df$Base))),
             columns=length(unique(df$Base))),
           xlab="Cycle", 
           aspect=2)
}
plotCycleQuality <- function(df) 
{
    qnum <- as(SFastqQuality(as.character(df$Quality)), "numeric")
    df$qtot <- qnum * df$Count

    aveScore <- with(df,
                     tapply(qtot, list(lane, Cycle), sum) /
                     tapply(Count, list(lane, Cycle), sum))
    score <- data.frame(AverageScore=as.vector(aveScore),
                        Cycle=as.vector(col(aveScore)),
                        Lane=rownames(aveScore))
    xyplot(AverageScore~Cycle | Lane, score,
           ylab="Average score",
           aspect=2)
}
@ 

<<qa-run>>=
load("@QA_SAVE_FILE@")
@

\section{Reads}

Read counts
<<read-counts>>=
ppnCount(qa[["readCounts"]])
@

Base calls
<<base-calls>>=
ppnCount(qa[["baseCalls"]])
@

Overall read quality
<<read-quality-raw, fig=TRUE>>=
df <- qa[["readQualityScore"]]
print(plotReadQuality(df[df$type=="read",]))
@ 

Read distribution: occurrences
<<read-distribution-occurrence, fig=TRUE>>=
df <- qa[["sequenceDistribution"]]
print(plotReadOccurrences(df[df$type=="read",]))
@ 

Common duplicate reads
<<common-duplicate-reads>>=
df <- qa[["frequentSequences"]]
lapply(split(df[,c("sequence", "count")], df$lane), head)
@

Common duplicate reads after filtering
<<common-duplicate-mapped-reads>>=
df1 <- df[df$type=="filtered",]
lapply(split(df1[,c("sequence", "count")], df1$lane), head)
@

Per-cycle base call
<<per-cycle-base-call, fig=TRUE>>=
perCycle <- qa[["perCycle"]]
print(plotCycleBaseCall(perCycle$baseCall))
@ 

Per-cycle quality score
<<per-cycle-quality, fig=TRUE>>=
print(plotCycleQuality(perCycle$quality))
@ 

Counts per tile (log 10)
<<read-counts-per-tile, fig=TRUE>>=
perTile <- qa[["perTile"]]
df <- perTile[["readCounts"]]
print(plotTileCounts(df[df$type=="read",]))
@ 

Median read quality score per tile
<<read-score-per-tile, fig=TRUE>>=
df <- perTile[["medianReadQualityScore"]]
print(plotTileQualityScore(df[df$type=="read",]))
@

Mapped alignment score
<<mapped-alignment-score, fig=TRUE>>=
print(plotAlignQuality(qa[["alignQuality"]]))
@ 

\appendix

\section{Report-specific functions}

<<appendix,keep.source=TRUE>>=
<<utilities>>
@

\end{document}
